#!/usr/bin/env python
# coding: utf-8

# # 3. Λίστες. Εκφράσεις, τελεστές
# 
# Στην τρέχουσα ενότητα γίνεται αναφορά σε μια από τις πιο δυνατές και χρήσιμες δομές της Python, τις λίστες.
# Οι λίστες μας επιτρέπουν να αποθηκεύομαι σύνολα πληροφορίας σε ένα μέρος είτε πρόκειται για ένα είτε για εκατομμύρια στοιχεία. 
# Oι λίστες αποτελούνται από μία σειρά από στοιχεία, καθένα από τα οποία μπορεί να ανήκει σε διαφορετικό τύπο δεδομένων.
# 
# ````{prf:definition}
# :label: list
# 
# Μία **λίστα** (list) είναι μια διατεταγμένη συλλογή τιμών, οι οποίες
# αντιστοιχίζονται σε δείκτες. Οι τιμές που είναι μέλη μιας λίστας ονομάζονται
# **στοιχεία** (elements). Τα στοιχεία μιας λίστας δεν χρειάζεται να είναι ίδιου τύπου
# και ένα στοιχείο σε μία λίστα μπορεί να υπάρχει περισσότερες από μία φορές.
# Μία λίστα μέσα σε μία άλλη λίστα ονομάζεται **εμφωλευμένη λίστα** (nested list).
# Επιπρόσθετα, τόσο οι λίστες όσο και οι συμβολοσειρές, που συμπεριφέρονται ως
# διατεταγμένες συλλογές τιμών, ονομάζονται **ακολουθίες** (sequences). Τα στοιχεία μιας λίστας διαχωρίζονται με κόμμα και περικλείονται σε τετράγωνες αγκύλες ([ και ]). Μία λίστα που δεν περιέχει στοιχεία ονομάζεται
# άδεια λίστα και συμβολίζεται με [] {cite}`Aggelidakis2015`. 
# ````
# Παρακάτω δίνονται μερικά παραδείγματα από λίστες

# In[1]:


bicycles = ['trek', 'cannondale', 'redline', 'specialized']
colors = ["red", "green", "black", "blue"]
scores = [10, 8, 9, -2, 9]
myList = ["one", 2, 3.0]
languages=[['English'],['Gujarati'],['Hindi'],'Romanian','Spanish'] # εμφωλευμένη λίστα (nested list)
list_A = [] # άδεια λίστα


# Οι λίστες είναι ταξινομημένες συλλογές δεδομένων.
# Η πρόσβαση στα στοιχεία της λίστας γίνεται μέσω του δείκτη ή της θέσης του κάθε στοιχείου. 
# Το σημαντικό που πρέπει να συγκρατηθεί είναι ότι η αρίθμηση των στοιχείων σε μια λίστα ξεκινάει από το μηδεν.
# Το πρώτο στοιχείο έχει δείκτη 0, το δεύτερο 1 κ.ο.κ. 
# Το τελευταίο στοιχείο στην λίστα έχει τον δείκτη -1, το δεύτερο στοιχείο από το τέλος τον δείκτη -1 κ.ο.κ.
# Δείτε στο παρακάτω παράδειγμα τι εκτυπώνεται με βάση την θέση του δηλώνουμε στην λιστα.

# In[2]:


bicycles = ['trek', 'cannondale', 'redline', 'specialized']
print(bicycles[0])
print(bicycles[1])
print(bicycles[-1])
print(bicycles[1:3])
print(bicycles[1:3])


# Παράδειγμα με εμφωλευμένη λίστα (nested list):

# In[3]:


two_by_two = [[1, 2], [3, 4]]

print(two_by_two[0][1])
print(two_by_two[1][1])


# Οι λίστες που περιέχουν συνεχόμενους ακέραιους αριθμούς μπορούν εύκολα να δημιουργηθούν ως εξής:

# In[4]:


mylist = list(range(1,20))
print(mylist)

mylist1 = list(range(10))
print(mylist1)

mylist2 = list(range(1,20,4))
print(mylist2)


# Σε αντίθεση με τις συμβολοσειρές (strings) οι λίστες είναι μεταβαλλόμενες δομές δεδομένων. 
# Αυτό σημαίνει ότι μπορoύμε να τροποποιήσουμε τα στοιχεία της λίστα, να προσθέσουμε νέα ή να αφαιρέσουμε.
# 
# Για παράδειγμα μπορούμε να τροποποιήσουμε τα στοιχεία μιας λίστας ως εξής:

# In[5]:


colors=['caramel','gold','silver','occur']
colors[3]='bronze'
print(colors)


# In[6]:


colors=['caramel','gold','silver','occur']
colors[2:]=['bronze','silver']
print(colors)


# In[7]:


colors=['caramel','gold','silver','occur']
colors[2:3]=['bronze','silver']
print(colors)


# Μπορούμε να προσθέσουμε **ένα** στοιχεία σε μια λίστα με την μέθοδο *append* π.χ.

# In[8]:


gods = ['Δίας', 'Ερμής', 'Ποσειδώνας', 'Ήφαιστος']
print("{} θεοί".format(len(gods)))
print(gods)


gods.append("Αππόλωνας")
gods.append("Άρης")
print("{} θεοί".format(len(gods)))
print(gods)


# Αν επιθυμούμε να προσθέσουμε πολλά στοιχεία τότε χρησιμοποιείται η μέθοδος *extend*

# In[9]:


months=["Ιανουάριος", "Φεβρουάριος", "Μάρτιος"]
months.extend(["Απρίλιος", "Μαϊος"]) # προσοχή το όρισμα στην μέθοδο extend είναι λίστα (ή κάποιο iterable object)


# Μπορούμε να αφαιρέσουμε στοιχεία από μία λίστα με διάφορους τρόπους.
# 
# με την πρόταση *del*
# Όταν γνωρίζουμε την θέση του στοιχείου που θέλουμε να αφαιρεθεί από μια λίστα χρησιμοποιούμαι την πρόταση *del*.
# Για παράδειγμα

# In[10]:


gods = ['Δίας', 'Ερμής', 'Ποσειδώνας', 'Ήφαιστος']
del gods[2]
print(gods)

# Το μήκος άλλαξε και μερικές από τις αντιστοιχείες στην λίστα. Πλέον ο θεός στην θέση 2 είναι ο:
print(gods[2])


# με την μέθοδο *pop*
# Μία άλλη χρήσιμη μέθοδο για την αφαίρεση στοιχείων από μια λίστα είναι η μέθοδος *pop*.
# Μέσω της μεθόδου αυτής όχι απλά αφαιρείται το στοιχείο από την λίστα αλλά επιστρέφεται και ως τιμή διαθέσιμη να την εκμεταλλευτεί ο προγραμματιστής π.χ. σε μία νέα μεταβλητή.
# Δείτε το εξής παράδειγμα:

# In[11]:


cars=["Alfa Romeo", "Renault", "BMW", "Renault", "Porsche"]
speed_car=cars.pop()
print(cars)
print(speed_car)

speed_car2=cars.pop(0)
print(speed_car2)


# Όπως φαίνεται από το παράδειγμα αν χρησιμοποιηθεί η μέθοδος pop() χωρίς δείκτη τότε αφαιρείται το τελευταίο στοιχείο της λίστας.
# 
# 
# με την μέθοδο *remove*
# Επιπλέον μπορούμε να αφαιρέσουμε στοιχεία από μία λίστα με την χρήση μιας τιμής και όχι με βάση τον δείκτη.
# Ωστόσο η παραπάνω τεχνική θα αφαιρέσει το πρώτο στοιχείο που θα εντοπιστεί με την τιμή αυτή.

# In[12]:


gods = ['Δίας', 'Ερμής', 'Ποσειδώνας', 'Ερμής', 'Ήφαιστος']

gods.remove("Ερμής")
print(gods)


# ## Χρήσιμες μέθοδοι (methods) και συναρτήσεις (functions)
# 
# Μία από τις πλέον χρήσιμες μεθόδους της κλάσσης list είναι η ταξινόμηση (*sort*).

# In[13]:


cars=[ "Porsche", "Alfa Romeo", "Renault", "BMW", "Audi" ]
cars.sort()
print(cars)


# όπως φαίνεται η ταξινόμηση των στοιχείων της λίστας είναι μόνιμη.
# Ωστόσο αν θέλουμε προσωρινή ταξινόμηση τότε χρησιμοποιείται η function *sorted*.

# In[14]:


cars=[ "Porsche", "Alfa Romeo", "Renault", "BMW", "Audi" ]
print(sorted(cars))
print(cars)


# Όπως βλέπετε κατά την τελευταία εκτύπωση η λίστα διατηρεί την αρχική ταξινόμηση.
# 
# Επιπλέον με την μέθοδο *reverse* μπορούμε να αντιστρέψουμε την διάταξη των στοιχείων της λίστας.
# Και εδώ το αποτέλεσμα είναι μόνιμο.

# In[15]:


cars=[ "Porsche", "Alfa Romeo", "Renault", "BMW", "Audi" ]

cars.reverse()
print(cars)


# Ακόμα μέσω της συνάρτησης *len* επιστρέφεται το πλήθος των στοιχείων της λίστας.

# In[16]:


languages=['English','Gujarati', 'Hindi','Romanian','Spanish']
print(len(languages))


# Εδώ πρέπει να δοθεί προσοχή. Γιατί ενώ η αρίθμηση των δεικτών ξεκινά από το 0 το μήκος της λίστας ξεκινά από το 1 για λίστα με ένα στοιχείο.
# Οπότε στο παρακάτω παράδειγμα θα λάβουμε σφάλμα εκτέλεσης αν πάμε να πάρουμε το 5ο και τελευταίο στοιχείο της λίστας. Γιατί αυτό ορίζεται με τον δείκτη 4.

# In[17]:


cars=[ "Porsche", "Alfa Romeo", "Renault", "BMW", "Audi" ]
print("Το μήκος της λίστας (πλήθος στοιχείων) είναι: ", len(cars))
print(cars[5])


# ```{note}
# Συχνά χρησιμοποιούμε έναν βρόγχο (loop) όπως το *for* για να προσπελάσουμε ένα προς ένα τα στοιχεία μιας λίστας. Δείτε το επόμενο παράδειγμα. 
# ```

# In[18]:


list = ['physics', 'chemistry', 1997, 2000]
for item in list:
    print(item)


# ::::{important}
# Ιδιαίτερη προσοχή πρέπει να δίνεται στον τρόπο που αντιγράφουμε λίστες. Δείτε γιατί στο επόμενο παράδειγμα.
# ::::

# In[19]:


nisia = ["Μήλος", "Κρήτη", "Λέσβος"]
greek_islands = nisia

greek_islands.append("Κέρκυρα")

print(nisia)


# Όπως φαίνεται οι μεταβλητές nisia και greek_islands αντιστοιχούν στο ίδιο υποκείμενο object και αν μεταβάλλοντας τα στοιχεία της μίας μεταβλητής η αλλαγή αντικατοπτρίζεται και στα στοιχεία της δεύτερης.
# Ο ενδεδειγμένος τρόπος για να αντιγράψουμε μια λίστα είναι να αντιγράψουμε όλα τα στοιχεία της ώστε να έχουμε δύο ανεξάρτητα objects (κλωνοποίηση).

# In[20]:


nisia = ["Μήλος", "Κρήτη", "Λέσβος"]
greek_islands = nisia[:]

greek_islands.append("Κέρκυρα")

print(nisia)

print(greek_islands)


# ## Εκφράσεις και τελεστές
# 
# Μία **έκφραση (expression)** είναι ένας συνδυασμός από *τιμές*, *μεταβλητές*,
# *τελεστές* και *κλήσεις σε συναρτήσεις*.
#  Οι **τελεστές (operators)** είναι λειτουργίες που κάνουν κάτι και
# μπορούν να αναπαρασταθούν με σύμβολα όπως το + ή με λέξεις κλειδιά όπως το
# and. Η αποτίμηση μιας έκφρασης παράγει μία τιμή και αυτός είναι και ο λόγος
# που μία έκφραση μπορεί να βρίσκεται στο δεξί μέρος μια εντολής εκχώρησης.
# Όταν μία μεταβλητή εμφανίζεται σε έκφραση, αντικαθίσταται από την τιμή της,
# προτού αποτιμηθεί η έκφραση {cite}`Aggelidakis2015`. 
# Δεν απαιτείται μία έκφραση να περιέχει ταυτόχρονα και τιμές και
# μεταβλητές και τελεστές. Μία τιμή, όπως και μία μεταβλητή, από μόνες τους
# είναι επίσης εκφράσεις.
# 
# Οι τελεστές χρησιμοποιούνται με αριθμητικές τιμές για την εκτέλεση μαθηματικών πράξεων.
# Ορισμένοι τελεστές έχουν εφαρμογή κα σε συμβολοσειρές.
# Πιο συγκεκρικένα διατίθενται οι παρακάτω τελεστές:
# 
# ### Αριθμητικοί τελεστές
# 
# | Τελεστής | Όνομα         | Παράδειγμα |
# |----------|----------------|------------|
# | +        | Πρόσθεση αριθμών ή συνένωση συμβολοσειρών          | x + y      |
# | -        | Αφαίρεση    | x - y      |
# | *        | Πολλαπλασίασμός ή επανάληψη συμβολοσειράς | x * y      |
# | /        | Διαίρεση       | x / y      |
# | %        | Υπόλοιπο διαίρεσης δύο αριθμών        | x % y      |
# | **       | Ύψωση αριθμού σε δύναμη | x ** y     |
# | //       | Διαίρεση δύο αριθμών στρογγυλοποιημένη προς τα κάτω  | x // y     |
# 
# 
# ### Τελεστές εκχώρησης
# 
# Χρησιμοποιούνται για να αποδώσουν τιμές σε μεταβλητές. 
# 
# | Τελεστής 	| Παράδειγμα 	| Αντίστοιχο με  	|
# |----------	|---------	|------------	|
# | =        	| x = 5   	| x = 5      	|
# | +=       	| x += 3  	| x = x + 3  	|
# | -=       	| x -= 3  	| x = x - 3  	|
# | *=       	| x *= 3  	| x = x * 3  	|
# | /=       	| x /= 3  	| x = x / 3  	|
# | %=       	| x %= 3  	| x = x % 3  	|
# | //=      	| x //= 3 	| x = x // 3 	|
# | **=      	| x **= 3 	| x = x ** 3 	|
# | &=       	| x &= 3  	| x = x & 3  	|
# | \|=      	| x \|= 3 	| x = x \| 3 	|
# | ^=       	| x ^= 3  	| x = x ^ 3  	|
# | >>=      	| x >>= 3 	| x = x >> 3 	|
# | <<=      	| x <<= 3 	| x = x << 3 	|
# 
# 
# ### Τελεστές σύγκρισης
# 
# Χρησιμοποιούνται για την σύγκριση 2 τιμών
# 
# | Τελεστής 	| Σύγκριση                     	| Παράδειγμα 	|
# |----------	|--------------------------	|---------	|
# | ==       	| Ίσον                    	| x == y  	|
# | !=       	| Διαφορετικό             	| x != y  	|
# | >        	| Μεγαλύτερο από            	| x > y   	|
# | <        	| Μικρότερο από               	| x < y   	|
# | >=       	| Μεγαλύτερο ή ίσον από	| x >= y  	|
# | <=       	| Μικρότερο ή ίσον από   	| x <= y  	|
# 
# 
# ### Λογικοί τελεστές
# 
# | Τελεστής 	| Περιγραφή                                             	| Παράδειγμα               	|
# |----------	|---------------------------------------------------------	|-----------------------	|
# | and      	| Επιστρέφει Αληθές (True) αν και οι δύο προτάσεις είναι αληθείς                	| x < 5 and  x < 10     	|
# | or       	| Επιστρέφει Αληθές (True) αν έστω μία από τις προτάσεις είναι αληθή           	| x < 5 or x < 4        	|
# | not      	| Αντιστροφή απότελέσματος, επιστρέφει Μη Αληθές όταν το αποτέλεσμα είναι αληθές 	| not(x < 5 and x < 10) 	|
# 
# 
# Εκτός από τους παραπάνω τελεστές υπάρχουν πιο εξειδικεύμενοι τελεστές που δεν θα αναφερθούμε (Bitwise, Membership, Identity operators).
# 
# Οι τελεστές στη Python τηρούν την αντίστοιχη προτεραιότητα που χρησιμοποιείται και στα μαθηματικά.
# 
# Οι παρενθέσεις έχουν τη μεγαλύτερη προτεραιότητα.
# Πολλαπλασιασμός και διαίρεση έχουν υψηλότερα προτεταιότητα από την πρόσθεση και αφαίρεση.
# 
# Τελεστές με την ίδια προτεραιότητα αποτιμώνται από τα αριστερά προς
# τα δεξιά.
